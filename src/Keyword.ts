const KEYWORDS = [
  'ABORT',
  'ACTION',
  'ADD',
  'AFTER',
  'ALL',
  'ALTER',
  'ALWAYS',
  'ANALYZE',
  'AND',
  'ANY',
  'AS',
  'ASC',
  'ATTACH',
  'AUTOINCREMENT',
  'BACKUP',
  'BEFORE',
  'BEGIN',
  'BETWEEN',
  'BIGINT',
  'BINARY',
  'BIT',
  'BOTTOM',
  'BREAK',
  'BY',
  'CALL',
  'CAPABILITY',
  'CASCADE',
  'CASE',
  'CAST',
  'CHAR_CONVERT',
  'CHAR',
  'CHARACTER',
  'CHECK',
  'CHECKPOINT',
  'CLOSE',
  'COLLATE',
  'COLUMN',
  'COMMENT',
  'COMMIT',
  'COMPRESSED',
  'CONFLICT',
  'CONNECT',
  'CONSTRAINT',
  'CONTAINS',
  'CONTINUE',
  'CONVERT',
  'CREATE',
  'CROSS',
  'CUBE',
  'CURRENT_DATE',
  'CURRENT_TIME',
  'CURRENT_TIMESTAMP',
  'CURRENT_USER',
  'CURRENT',
  'CURSOR',
  'DATABASE',
  'DATE',
  'DATETIMEOFFSET',
  'DBSPACE',
  'DEALLOCATE',
  'DEC',
  'DECIMAL',
  'DECLARE',
  'DEFAULT',
  'DEFERRABLE',
  'DEFERRED',
  'DELETE',
  'DELETING',
  'DESC',
  'DETACH',
  'DISTINCT',
  'DO',
  'DOUBLE',
  'DROP',
  'NULLS',
  'LAST',
  'DYNAMIC',
  'PARTITION',
  'PRAGMA',
  'INDEXED',
  'RAISE',
  'REINDEX',
  'RETURNING',
  'STRICT',
  'WITHOUT',
  'ROWID',
  'NOTHING',
  'VACUUM',
  'EXPLAIN',
  'EXPLAIN',
  'QUERY',
  'PLAN',
  'EACH',
  'ELSE',
  'ELSEIF',
  'ENCRYPTED',
  'END',
  'ENDIF',
  'ESCAPE',
  'EXCEPT',
  'EXCEPTION',
  'EXCLUDE',
  'EXCLUSIVE',
  'EXEC',
  'EXECUTE',
  'EXISTING',
  'EXISTS',
  'EXTERNLOGIN',
  'FAIL',
  'FALSE',
  'FETCH',
  'FILTER',
  'FIRST',
  'FLOAT',
  'FOLLOWING',
  'FOR',
  'FORCE',
  'FOREIGN',
  'FORWARD',
  'FROM',
  'FULL',
  'GENERATED',
  'GLOB',
  'GOTO',
  'GRANT',
  'GROUP',
  'GROUPS',
  'HAVING',
  'HOLDLOCK',
  'IDENTIFIED',
  'IF',
  'IGNORE',
  'IMMEDIATE',
  'IN',
  'INDEX',
  'INITIALLY',
  'INNER',
  'INOUT',
  'INSENSITIVE',
  'INSERT',
  'INSERTING',
  'INSTALL',
  'INSTEAD',
  'INT',
  'INTEGER',
  'INTEGRATED',
  'INTERSECT',
  'INTO',
  'IS',
  'ISNULL',
  'ISOLATION',
  'JOIN',
  'KERBEROS',
  'KEY',
  'LATERAL',
  'LEFT',
  'LIKE',
  'LIMIT',
  'LOCK',
  'LOGIN',
  'LONG',
  'MATCH',
  'MATERIALIZED',
  'MEMBERSHIP',
  'MERGE',
  'MESSAGE',
  'MODE',
  'MODIFY',
  'NATURAL',
  'NCHAR',
  'NEW',
  'NO',
  'NOHOLDLOCK',
  'NOT',
  'NOTIFY',
  'NOTNULL',
  'NULL',
  'NUMERIC',
  'NVARCHAR',
  'OF',
  'OFF',
  'OFFSET',
  'ON',
  'OPEN',
  'OPENSTRING',
  'OPENXML',
  'OPTION',
  'OPTIONS',
  'OR',
  'ORDER',
  'OTHERS',
  'OUT',
  'OUTER',
  'OVER',
  'PASSTHROUGH',
  'PRECEDING',
  'PRECISION',
  'PREPARE',
  'PRIMARY',
  'PRINT',
  'PRIVILEGES',
  'PROC',
  'PROCEDURE',
  'PUBLICATION',
  'RAISERROR',
  'RANGE',
  'READTEXT',
  'REAL',
  'RECURSIVE',
  'REFERENCE',
  'REFERENCES',
  'REFRESH',
  'REGEXP',
  'RELEASE',
  'REMOTE',
  'REMOVE',
  'RENAME',
  'REORGANIZE',
  'REPLACE',
  'RESOURCE',
  'RESTORE',
  'RESTRICT',
  'RETURN',
  'REVOKE',
  'RIGHT',
  'ROLLBACK',
  'ROLLUP',
  'ROW',
  'ROWS',
  'SAVE',
  'SAVEPOINT',
  'SCROLL',
  'SELECT',
  'SENSITIVE',
  'SESSION',
  'SET',
  'SETUSER',
  'SHARE',
  'SMALLINT',
  'SOME',
  'SPATIAL',
  'SQLCODE',
  'SQLSTATE',
  'START',
  'STOP',
  'STORED',
  'SUBTRANS',
  'SUBTRANSACTION',
  'SYNCHRONIZE',
  'TABLE',
  'TEMP',
  'TEMPORARY',
  'THEN',
  'TIES',
  'TIME',
  'TIMESTAMP',
  'TINYINT',
  'TO',
  'TOP',
  'TRAN',
  'TRANSACTION',
  'TREAT',
  'TRIGGER',
  'TRUE',
  'TRUNCATE',
  'TSEQUAL',
  'UNBOUNDED',
  'UNION',
  'UNIQUE',
  'UNIQUEIDENTIFIER',
  'UNKNOWN',
  'UNSIGNED',
  'UPDATE',
  'UPDATING',
  'USER',
  'USING',
  'VALIDATE',
  'VALUES',
  'VARBINARY',
  'VARBIT',
  'VARCHAR',
  'VARIABLE',
  'VARYING',
  'VIEW',
  'VIRTUAL',
  'WAIT',
  'WAITFOR',
  'WHEN',
  'WHERE',
  'WHILE',
  'WINDOW',
  'WITH',
  'WITHIN',
  'WORK',
  'WRITETEXT',
  'XML',
] as const;

export type Keywords = {
  isKeyword(str: string): str is Keyword;
} & { [K in Keyword]: K };

export type Keyword = typeof KEYWORDS extends ReadonlyArray<infer K> ? K : never;

export const Keywords: Keywords = KEYWORDS.reduce<Keywords>(
  (acc, key) => {
    (acc as any)[key] = key;
    return acc;
  },
  {
    isKeyword(str: string): str is Keyword {
      const upper = str.toUpperCase();
      return KEYWORDS.indexOf(upper as any) >= 0;
    },
  } as any
);
